name: Scan artifact with Amazon Inspector
on:
  workflow_dispatch:
    inputs:
      src_repository:
        description: 'Source Repository'
        required: true
        default: ''
      src_artifact_type:
        description: 'artifact_type to either repository, container, binary, or archive'
        required: false
        default: 'repository'
        
jobs:
 daily_job:
   runs-on: ubuntu-latest

   # change this to match your GitHub Secrets environment
   environment:
     name: your_github_secrets_environment

   steps:
     - name: Scan container
       id: inspector
       uses: aws-actions/vulnerability-scan-github-action-for-amazon-inspector@v1
       with:
        artifact_type: ${{ inputs.src_artifact_type }}
        artifact_path: ${{ inputs.src_repository }}
        display_vulnerability_findings: "enabled"

     # The following steps illustrate how to
     # display scan results in the GitHub Actions job terminal.
     - name: Display CycloneDX SBOM (JSON)
       run: cat ${{ steps.inspector.outputs.artifact_sbom }}

     - name: Display Inspector vulnerability scan results (JSON)
       run: cat ${{ steps.inspector.outputs.inspector_scan_results }}

     - name: Display Inspector vulnerability scan results (CSV)
       run: cat ${{ steps.inspector.outputs.inspector_scan_results_csv }}

     - name: Display Inspector vulnerability scan results (Markdown)
       run: cat ${{ steps.inspector.outputs.inspector_scan_results_markdown }}


     # The following steps illustrate how to
     # upload scan results as a GitHub actions job artifact
     - name: Upload Scan Results
       uses: actions/upload-artifact@v4
       with:
         name: Inspector Vulnerability Scan Artifacts
         path: |
           ${{ steps.inspector.outputs.inspector_scan_results }}
           ${{ steps.inspector.outputs.inspector_scan_results_csv }}
           ${{ steps.inspector.outputs.artifact_sbom }}
           ${{ steps.inspector.outputs.inspector_scan_results_markdown }}


       # This step illustrates how to add custom logic if
       # the vulnerability threshold is exceeded. This example
       # simply prints the 'vulnerability_threshold_exceeded' value
       # to the GitHub actions job terminal.
       # Replace 'echo' with 'exit' if you want to fail the job.
     - name: On vulnerability threshold exceeded
       run: echo ${{ steps.inspector.outputs.vulnerability_threshold_exceeded }}
